// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mlb/video.proto

package mlb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Video service

type VideoService interface {
	// 将笔迹和音频制作为一个视频
	Build(ctx context.Context, in *BuildRequest, opts ...client.CallOption) (*BuildResponse, error)
}

type videoService struct {
	c    client.Client
	name string
}

func NewVideoService(name string, c client.Client) VideoService {
	return &videoService{
		c:    c,
		name: name,
	}
}

func (c *videoService) Build(ctx context.Context, in *BuildRequest, opts ...client.CallOption) (*BuildResponse, error) {
	req := c.c.NewRequest(c.name, "Video.Build", in)
	out := new(BuildResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Video service

type VideoHandler interface {
	// 将笔迹和音频制作为一个视频
	Build(context.Context, *BuildRequest, *BuildResponse) error
}

func RegisterVideoHandler(s server.Server, hdlr VideoHandler, opts ...server.HandlerOption) error {
	type video interface {
		Build(ctx context.Context, in *BuildRequest, out *BuildResponse) error
	}
	type Video struct {
		video
	}
	h := &videoHandler{hdlr}
	return s.Handle(s.NewHandler(&Video{h}, opts...))
}

type videoHandler struct {
	VideoHandler
}

func (h *videoHandler) Build(ctx context.Context, in *BuildRequest, out *BuildResponse) error {
	return h.VideoHandler.Build(ctx, in, out)
}
